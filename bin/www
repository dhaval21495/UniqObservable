#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-crud:server');
var http = require('http');
var Users = require("../models/User");
var Chat = require('../models/Chat');
var Matches = require('../models/Matches')
var fs = require('fs');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
// var key = fs.readFileSync('/etc/letsencrypt/live/the-y-list.com/privkey.pem');
// var cert = fs.readFileSync( '/etc/letsencrypt/live/the-y-list.com/cert.pem');
// var ca = fs.readFileSync( '/etc/letsencrypt/live/the-y-list.com/fullchain.pem');

// var options = {
// key: key,
// cert: cert,
// ca: ca
// };

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
var io = require('socket.io').listen(server);
// Chat
io.on("connection", function (client) {
  client.on('req', function (data) {
    if (typeof data.en == 'undefined' && typeof data.data == 'undefined') {
      sendData('ERROR', {
        msg: "Something went wrong, please try again.",
        code: 0
      }, client);
      return false;
    }
    var en = data.en;
    var data = data.data;
    switch (en) {
      case 'USER_JOIN':
        userJoin(data, client);
        break;
      case 'USER_LIST':
        getUser(data, client);
        break;
      case 'SEND_MESSAGE':
        sendMessage(data, client);
        break;
      case 'CHAT_OPEN':
        chatOpen(data, client);
        break;
      case 'CHAT_TYPING':
        chatTyping(data, client);
        break;
    }
  });

  // disconnect user
  client.on('disconnect', function () {
    userDisconnect(client);
  });
});

// User Login / Join
function userJoin(data, client) {

  Users.findByIdAndUpdate(data.uid, {
      socket_id: client.id,
      is_login: true
    })
    .then((res) => {
      client.uid = data.uid;
      // sendData('USER_JOINR',{user : data.uid, adminId : adminId},client);
    })
    .catch(function (err) {
      sendData('ERROR', {
        msg: "Something went wrong, please try again.",
        code: 0
      }, client);
    });
}

// User List
function getUser(data, client) {
  var uid = data.uid;
  Matches.find({
      $and: [{
        $or: [{
          user_id: uid
        }, {
          partner_id: uid
        }],
      }, {
        $and: [{
          user_like: {
            "$ne": ""
          }
        }, {
          partner_like: {
            "$ne": ""
          }
        }]
      }],
    })
    .populate('user_id')
    .populate('partner_id')
    .sort({
      "chat_date": -1
    })
    .exec(function (error, matches) {
      sendData('USER_LISTS', {
        array: matches
      }, client);
    })
}

// Chat Open
function chatOpen(data, client) {
  if (checkClientData("chatOpen", data, client)) {
    var uid = data.uid;
    var ouid = data.ouid;
    //
    updateCurrentUser(uid, ouid);
    //
    Matches.findOne({
      $or: [{
        $and: [{
          user_id: uid
        }, {
          partner_id: ouid
        }],
      }, {
        $and: [{
          user_id: ouid
        }, {
          partner_id: uid
        }]
      }],
    }, function (err, matches) {
      if (matches.user_id != uid) {
        Matches.findByIdAndUpdate(matches._id, { partner_read : 0 }, (err, entity) => { });
      } else {
        Matches.findByIdAndUpdate(matches._id, { uid_read : 0 }, (err, entity) => { });
      }
    });
    //
    Chat.find({
        $or: [{
          $and: [{
            from_id: uid
          }, {
            to_id: ouid
          }],
        }, {
          $and: [{
            to_id: uid
          }, {
            from_id: ouid
          }]
        }],
      })
      .populate('from_id')
      .populate('to_id')
      .sort({
        "date": -1
      })
      .limit(50)
      .exec(function (error, chat) {
        sendData('CHAT_OPENR', {
          array: chat
        }, client);
      });
  }
}

function updateCurrentUser(id, uid){
  Users.findOneAndUpdate({'_id':id}, { current_chat: uid }, function name(params) {});
}

// Send Message
function sendMessage(data, client) {
  if (checkClientData("sendMessage", data, client)) {
    var chatObj = {
      from_id: data.uid,
      to_id: data.ouid,
      msg: data.msg,
      date: new Date()
    };
    Users.where({
        _id: data.ouid
      }).select('socket_id').limit(1)
      .then((user) => {
        var chat = new Chat(chatObj);
        chat.save(chatObj)
          .then((res) => {
            Matches.findOneAndUpdate({
              $or: [{
                $and: [{
                  user_id: data.uid
                }, {
                  partner_id: data.ouid
                }],
              }, {
                $and: [{
                  user_id: data.ouid
                }, {
                  partner_id: data.uid
                }]
              }],
            }, {
              chat_date: new Date()
            }, function (err, results) {
              console.log(results);
              if (results.user_id != data.uid) {
                checkCurrentChat(results._id, callbackcheckCurrentChat);

                function callbackcheckCurrentChat(response) {
                  
                }
                var uid_read = (results.uid_read == 0) ? 1 : results.uid_read + 1;
                Matches.findByIdAndUpdate(results._id, { uid_read: uid_read }, (err, entity) => { });
              } else {
                checkCurrentChat(results._id, callbackcheckCurrentChat);
                
                function callbackcheckCurrentChat(response) {

                }
                var partner_read = (results.partner_read == 0) ? 1 : results.partner_read + 1;
                Matches.findByIdAndUpdate(results._id, { partner_read: partner_read }, (err, entity) => { });
              }
              if (results) {
                sendData('USER_JOINR', {userId: data.uid,oId: data.ouid}, client);
                //
                client.to(user[0].socket_id).emit('res', {en: 'USER_JOINR',userId: data.uid});
                //
              }
            });
            Chat.findOne({
                $or: [{
                  $and: [{
                    from_id: data.uid
                  }, {
                    to_id: data.ouid
                  }],
                }, {
                  $and: [{
                    to_id: data.uid
                  }, {
                    from_id: data.ouid
                  }]
                }],
              })
              .populate('from_id')
              .populate('to_id')
              .sort({
                'date': -1
              })
              .limit(1)
              .exec(function (error, chat) {
                sendData('SEND_MESSAGER', {
                  data: chat
                }, client);
                if (user.length > 0 && user[0].socket_id != "" && user[0].socket_id != null) {
                  client.to(user[0].socket_id).emit('res', {
                    en: 'RECEIVE_MESSAGER',
                    data: chat
                  });
                  // client.to(user[0].socket_id).emit('res', { en: 'SEND_MESSAGER', data: chatObj });
                } else if (user.length > 0) {}
              });
          }).catch(function (err) {
            sendData('ERROR', {
              msg: "Something went wrong, please try again.",
              code: 0
            }, client);
          });
      })
      .catch(function (err) {
        sendData('ERROR', {
          msg: "Something went wrong, please try again.",
          code: 0
        }, client);
      });
  }
}

function checkCurrentChat(uid, callback) {
  
}

//
function chatTyping(data, client) {
  Users.where({
      _id: data.uid
    }).select('socket_id').limit(1)
    .then((user) => {
      client.to(user[0].socket_id).emit('res', {
        en: 'CHAT_TYPINGR',
        data: 'Typing..'
      });
    })
    .catch(function (err) {
      sendData('ERROR', {
        msg: "Something went wrong, please try again.",
        code: 0
      }, client);
    });
}
//
// userDisconnect
function userDisconnect(client) {
  console.log("==== client.uid ====");
  console.log(client.uid);
  console.log("==== client.uid ====");
  if (typeof client.uid != 'undefined') {
    Users.where({
        '_id': client.uid
      }).update({
        socket_id: "",
        is_login: false,
      })
      .then((res) => {})
  }
}
//

function sendData(en, data, client) {
  if (typeof en == 'undefined' || typeof data == 'undefined' || typeof client == 'undefined' || typeof client.emit == 'undefined') {
    return false
  }
  client.emit('res', {
    en: en,
    data: data
  })
}

function checkClientData(type, data, client) {
  var flag = true;

  switch (type) {
    case 'userJoin':
    case 'userList':
    case 'notificationList':
    case 'chatClose':
    case 'chatCount':
    case 'notificationCount':
      if (typeof data.uid == 'undefined' || data.uid == "")
        flag = false;
      break;

    case 'sendMessage':
      if (typeof data.uid == 'undefined' || data.uid == "" || typeof data.ouid == 'undefined' || data.ouid == "" || typeof data.msg == 'undefined' || data.msg == "")
        flag = false;
      break;

    case 'chatOpen':
      if (typeof data.uid == 'undefined' || data.uid == "" || typeof data.ouid == 'undefined' || data.ouid == "")
        flag = false;
      break;
  }
  if (!flag) {
    sendData('ERROR', {
      msg: "Something went wrong, please try again.",
      type: type,
      code: 0
    }, client);
  }
  return flag;
}
//
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
